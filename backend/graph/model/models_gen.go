// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ApplicationResult struct {
	Status  ApplicationStatus `json:"status"`
	Message string            `json:"message"`
	Did     *string           `json:"did"`
}

type InputNewUserDataInformation struct {
	IcCard    string `json:"icCard"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Gender    Gender `json:"gender"`
	Dob       string `json:"dob"`
	Address   string `json:"address"`
	City      string `json:"city"`
	Postcode  string `json:"postcode"`
	State     string `json:"state"`
}

type InputUserLogin struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type User struct {
	Username        string               `json:"username"`
	Password        string               `json:"password"`
	UserType        string               `json:"user_type"`
	FileID          []string             `json:"fileID"`
	ApplicantStatus *ApplicationStatus   `json:"applicantStatus"`
	Did             *string              `json:"did"`
	WalletID        *string              `json:"walletID"`
	RejectMessage   string               `json:"rejectMessage"`
	Data            *UserDataInformation `json:"data"`
}

type UserApplicantStatus struct {
	Username        string            `json:"username"`
	Name            string            `json:"name"`
	ApplicantStatus ApplicationStatus `json:"applicantStatus"`
	Did             *string           `json:"did"`
}

type UserApplicationDetail struct {
	ApplicantStatus ApplicationStatus    `json:"applicantStatus"`
	Username        string               `json:"username"`
	Files           []string             `json:"files"`
	RejectMessage   string               `json:"rejectMessage"`
	UserDetail      *UserDataInformation `json:"userDetail"`
}

type UserCurrentApplicationStatus struct {
	RejectMessage string            `json:"rejectMessage"`
	Status        ApplicationStatus `json:"status"`
}

type UserDataInformation struct {
	UserID    string `json:"userID"`
	IcCard    string `json:"icCard"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Gender    Gender `json:"gender"`
	Dob       string `json:"dob"`
	Address   string `json:"address"`
	City      string `json:"city"`
	State     string `json:"state"`
	Postcode  string `json:"postcode"`
}

type UserFile struct {
	ID        string `json:"id"`
	Extension string `json:"extension"`
	Name      string `json:"name"`
	Size      string `json:"size"`
}

type ApplicationStatus string

const (
	ApplicationStatusPending  ApplicationStatus = "PENDING"
	ApplicationStatusApprove  ApplicationStatus = "APPROVE"
	ApplicationStatusRejected ApplicationStatus = "REJECTED"
)

var AllApplicationStatus = []ApplicationStatus{
	ApplicationStatusPending,
	ApplicationStatusApprove,
	ApplicationStatusRejected,
}

func (e ApplicationStatus) IsValid() bool {
	switch e {
	case ApplicationStatusPending, ApplicationStatusApprove, ApplicationStatusRejected:
		return true
	}
	return false
}

func (e ApplicationStatus) String() string {
	return string(e)
}

func (e *ApplicationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationStatus", str)
	}
	return nil
}

func (e ApplicationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
